Programas a utilizar
-VSCode
-nodejs (desde una terminal que se abre con cmd escribir node --version y dala version si esta instalada)
-mongodb (desde una terminal que se abre con cmd escribir mongod --version y dala version si esta instalada)
--------------------------------------------------------------------------
Primero creamos el directorio
# mkdir C:\oracle\VSCode\notes-app-mongodb
Se agrega a VSCode, simplemente arrastrando la carpeta
Luego se abre una terminal con Ctrl+Shift+P dentro de VSCode
buscando Crear nueva terminal integrada en la carpeta del proyecto
Una vez en la terminal se ejecuta
npm init -y
para iniciar el proyecto, crea un archivo package.json que listara lo necesario para el proyecto
npm es el comando de node
init es para indicar que se inicia y con -y se confirma
Luego agrego los modulos necesario para el proyecto, i es para abreviar install
npm i express connect-flash bcryptjs express-handlebars express-session method-override mongoose passport passport-local
----
express -- ayuda a crear el servidor, es un framework del servidor
connect-flash -- como las paginas no se comunican entre si se utiliza para enviar mensajes entre vistas, los guarda en alguna cookie o sesion
bcryptjs -- es un modulo de cifrado ayuda a ejecutar algoritmos para cifrar textos como las contrasenas, por ejemplo, en la base no se guarda el texto de la contrasena
express-handlebars -- ayuda a poder crear vistas html (.hbs)
express-session -- ayuda a guardar datos desde la memoria del servidor, por ejemplo para la sesion de un usuario
method-override -- sirve para enviar puticiones put o delete desde la vista/formulario para tener rutas simples de leer/interpretar
mongoose -- para manejar la base de datos mongodb, ayuda para manejar esquemas
passport -- es para que se pueda autenticar el usuario, junto con bcryptjs
passport-local -- para indicar que es una base de datos local a passport
----
Esto devolvio
-------------------------------------------------------------------------
C:\oracle\VSCode\notes-app-mongodb>npm i express connect-flash bcryptjs express-handlebars express-session method-override mongoose passport passport-local
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN notes-app-mongodb@1.0.0 No description
npm WARN notes-app-mongodb@1.0.0 No repository field.

+ express@4.17.1     
+ connect-flash@0.1.1
+ method-override@3.0.0
+ passport@0.4.1
+ passport-local@1.0.0
+ express-handlebars@4.0.4
+ express-session@1.17.1
+ bcryptjs@2.4.3
+ mongoose@5.9.19
added 117 packages from 103 contributors and audited 117 packages in 19.73s

3 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
-------------------------------------------------------------------------
Tambien agregamos mas modulos
npm install dotenv nodemon npm-check-updates -D
dotenv -- para poder utilizar variables de entorno en programas y que queden seguros en el entorno de desarrollo porque quedan locales
nodemon -- ayuda a reiniciar cada vez que se realiza un cambio en el desarrollo
handlebars -- es por una dependencia de desarrollo por problemas que surgieron con express-handlebars en las nuevas versiones, ahora no se instala, solo por las dudas a futuro
npm-check-updates -- ayuda a supervisar si hay nuevos modulos o actualizaciones
-D -- no son principales sino solo para desarrollo
----------------------------------------------------------------------------
C:\oracle\VSCode\notes-app-mongodb>npm install dotenv nodemon npm-check-updates -D
npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142     

> nodemon@2.0.4 postinstall C:\oracle\VSCode\notes-app-mongodb\node_modules\nodemon
> node bin/postinstall || exit 0

Love nodemon? You can now support the project via the open collective:
 > https://opencollective.com/nodemon/donate

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules\chokidar\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})
npm WARN notes-app-mongodb@1.0.0 No description
npm WARN notes-app-mongodb@1.0.0 No repository field.

+ dotenv@8.2.0
+ nodemon@2.0.4
+ npm-check-updates@7.0.1
added 316 packages from 151 contributors and audited 434 packages in 31.372s

16 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilitie
----------------------------------------------------------------------
Se comienzan a crear directorio y archivos
src -- directorio principal que tendra todo el contenido
src/index.js -- archivo principal, arranca la aplicacion
src/server.js -- codigo del servidor el codigo de express
src/database.js -- tiene la conexion a la base de datos
Luego se crean varios directorios
mkdir config controllers helpers models public routes views
---------------------
config -- configurar modulos
controllers --almacena las funciones que se utilizan cuando un usuario visite alguna ruta del servidor
helpers -- para poder colocar algunas funciones para que se haga algo desde la vista, por ejemplo handlebars no tiene bucles o switch, para eso se puede hacer a traves de los helpers, es decir que es codigo adicional para handlebars
models -- almacenar los modelos de datos, esquemas en mongodb
public -- para colocar archivos publicos o estaticos como imagenes o css
routes -- para crear las rutas o urls del servidor
views -- para guardar los archivos de handlebars o htmls que se le envian al cliente
---------------------
Con las primeras lineas de server.js e index.js se puede probar desde la linea de comandos
node src/index.js
Si quiero terminarlo es con ctrl+c
en src/server.js se declara todas las configuraciones para el proyecto servidor, como por ejemplo las rutas principales y raices
---------------------
Como hacer que se reinicie el servidor con cualquier cambio de manera automatica
ir al archivo package.json en el raiz
y en la parte en donde dice "test": "echo \"Error: no test specified\" && exit 1"
se cambia por "start": "node src/index.js"
Luego desde la linea de comandos se ejecuta
npm start
Es como el alias de node src/index.js
Para que quede como un servicio se utiliza nodemon y se agrega luego del alias ingresado anteriorimente ("start") en la linea siguiente
queda en total:
"start": "node src/index.js",
"dev": "nodemon src/index.js"
A partir de ahora solo se ejecuta al iniciar
npm run dev
La diferencia es que quedan declarados y que para desarrollo utilizo dev y para el entorno productivo utilizo start
